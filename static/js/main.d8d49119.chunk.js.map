{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","components/simpleHabit.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","onSubmit","event","preventDefault","current","value","onAdd","reset","ref","type","placeholder","Habits","addHandling","habits","map","id","onReset","Component","Navbar","totalCount","SimpleHabit","useState","setCount","spanRef","useRef","useEffect","console","log","useCallback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAkDeA,G,kNA9CbC,gBAAkB,WAChB,EAAKC,MAAMC,YAAY,EAAKD,MAAME,Q,EAGpCC,gBAAkB,WAChB,EAAKH,MAAMI,YAAY,EAAKJ,MAAME,Q,EAGpCG,aAAe,WACb,EAAKL,MAAMM,SAAS,EAAKN,MAAME,Q,uDAGvB,IAAD,EACiBK,KAAKP,MAAME,MAA3BM,EADD,EACCA,KAAMC,EADP,EACOA,MAMd,OACE,qBAAIC,UAAU,QAAd,UACE,sBAAMA,UAAU,aAAhB,SAA8BF,IAC9B,sBAAME,UAAU,cAAhB,SAA+BD,IAC/B,wBACEC,UAAU,8BACVC,QAASJ,KAAKR,gBAFhB,SAIE,mBAAGW,UAAU,yBAEf,wBACEA,UAAU,8BACVC,QAASJ,KAAKJ,gBAFhB,SAIE,mBAAGO,UAAU,0BAEf,wBACEA,UAAU,4BACVC,QAASJ,KAAKF,aAFhB,SAIE,mBAAGK,UAAU,0B,GAzCHE,kBCyBLC,EAzBMC,gBAAK,SAAAd,GACtB,IAAMe,EAAUC,IAAMC,YAChBC,EAAWF,IAAMC,YAUvB,OACI,uBAAMP,UAAU,OAAOS,SATP,SAAAC,GAChBA,EAAMC,iBACN,IAAMb,EAAOU,EAASI,QAAQC,MAC9Bf,GAAQR,EAAMwB,MAAMhB,GACpBO,EAAQO,QAAQG,SAK8BC,IAAKX,EAAnD,UACI,uBACAW,IAAKR,EACLS,KAAK,OAAOC,YAAY,WAExB,+CCuBGC,E,4MArCb9B,gBAAkB,SAACG,GACjB,EAAKF,MAAMC,YAAYC,I,EAGzBC,gBAAkB,SAACD,GACjB,EAAKF,MAAMI,YAAYF,I,EAGzBG,aAAe,SAACH,GACd,EAAKF,MAAMM,SAASJ,I,EAGtB4B,YAAc,SAAAtB,GACZ,EAAKR,MAAMwB,MAAMhB,I,uDAGT,IAAD,OACP,OACE,gCACA,cAAC,EAAD,CAAcgB,MAAOjB,KAAKuB,cAC1B,6BACGvB,KAAKP,MAAM+B,OAAOC,KAAI,SAAA9B,GAAK,OAC1B,cAAC,EAAD,CAEEA,MAAOA,EACPD,YAAa,EAAKF,gBAClBK,YAAa,EAAKD,gBAClBG,SAAU,EAAKD,cAJVH,EAAM+B,SAQjB,wBAAQtB,QAASJ,KAAKP,MAAMkC,QAA5B,8B,GAjCeC,aCQNC,E,uKARP,OACI,wBAAQ1B,UAAU,SAAlB,SACKH,KAAKP,MAAMqC,iB,GAJPF,a,GCIHA,Y,OC+BHG,EAnCK,SAACtC,GAAU,MAMJuC,mBAAS,GANL,mBAMtB9B,EANsB,KAMhB+B,EANgB,KAQvBC,EAAUC,mBAEhBC,qBAAU,WACRC,QAAQC,IAAI,CAACpC,aAGf,IAAMV,EAAkB+C,uBAAY,WAClCN,EAAS/B,EAAM,MAGjB,OACE,qBAAIC,UAAU,QAAd,UACE,sBAAMA,UAAU,aAAhB,qBACA,sBAAMgB,IAAKe,EAAS/B,UAAU,cAA9B,SAA6CD,IAC7C,wBACEC,UAAU,8BACVC,QAASZ,EAFX,SAIE,mBAAGW,UAAU,6BCrBrBqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,W","file":"static/js/main.d8d49119.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nclass Habit extends PureComponent {\n\n  handleIncrement = () => {\n    this.props.onIncrement(this.props.habit);\n  };\n\n  handleDecrement = () => {\n    this.props.onDecrement(this.props.habit);\n  };\n\n  handleDelete = () => {\n    this.props.onDelete(this.props.habit);\n  };\n\n  render() {\n    const { name, count } = this.props.habit;\n    // 아직 이 부분이 이해가 가지 않는다, 없던 count객체를 새로 생성해줘서 업데이트되는건가?\n    // 그럼 아무 상관없는 데이터 객체를 생성해줘도 상관없는건가? 값이 그대로인 name을 줘도 되나? -안되네\n    // 아니 객체로 전달받았어도 결국 habit의 상태를 변경하는거아닌가? 뭔소린지 모르겠네 나는\n    // 어쨋든간에 객체형태로 자식한테 보내주면 된다 이거지..?일단.. ㅇㅋ\n    //const { count } = this.props;\n    return (\n      <li className=\"habit\">\n        <span className=\"habit-name\">{name}</span>\n        <span className=\"habit-count\">{count}</span>\n        <button\n          className=\"habit-button habit-increase\"\n          onClick={this.handleIncrement}\n        >\n          <i className=\"fas fa-plus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-decrease\"\n          onClick={this.handleDecrement}\n        >\n          <i className=\"fas fa-minus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-delete\"\n          onClick={this.handleDelete}\n        >\n          <i className=\"fas fa-trash\"></i>\n        </button>\n      </li>\n    );\n  }\n}\n\nexport default Habit;\n","import React,{ memo } from 'react';\n\nconst HabitAddForm = memo(props =>{\n    const formRef = React.createRef();\n    const inputRef = React.createRef();\n\n    const addHandling = event =>{\n        event.preventDefault();\n        const name = inputRef.current.value;\n        name && props.onAdd(name);\n        formRef.current.reset();\n    }\n\n\n    return (\n        <form className=\"form\" onSubmit={addHandling} ref={formRef}>\n            <input \n            ref={inputRef}\n            type=\"text\" placeholder=\"Habits\"\n                />\n            <button >Add</button>\n        </form>\n    );\n});\n\n\n\nexport default HabitAddForm;","import React, { Component } from 'react';\nimport Habit from './habit';\nimport HabitAddForm from './habitAddForm';\n\nclass Habits extends Component {\n\n  handleIncrement = (habit) => {\n    this.props.onIncrement(habit);\n  };\n\n  handleDecrement = (habit) => {\n    this.props.onDecrement(habit);\n  };\n\n  handleDelete = (habit) => {\n    this.props.onDelete(habit);\n  };\n\n  addHandling = name => {\n    this.props.onAdd(name);\n  }\n\n  render() {\n    return (\n      <div>\n      <HabitAddForm onAdd={this.addHandling} />\n      <ul>\n        {this.props.habits.map(habit => (\n          <Habit\n            key={habit.id}\n            habit={habit}\n            onIncrement={this.handleIncrement}\n            onDecrement={this.handleDecrement}\n            onDelete={this.handleDelete}\n          />\n        ))}\n      </ul>\n      <button onClick={this.props.onReset}>reset All</button>\n      </div>\n    );\n  }\n}\n\nexport default Habits;\n","import React, { Component } from 'react';\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <navbar className=\"navbar\">\n                {this.props.totalCount}\n            </navbar>\n        );\n    }\n}\n\nexport default Navbar;","import './app.css';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\nimport React, { Component } from 'react';\n\n\nclass App extends Component {\n  state = {\n    habits: [\n      // { id: 1, name: 'Reading', count: 0 },\n      // { id: 2, name: 'Running', count: 0 },\n      // { id: 3, name: 'Coding', count: 0 },\n    ],\n  };\n\n  handleIncrement = habit => {\n    // 배열로 보내고 함수는 단독으로 처리하네\n    // 부모는 함수와 데이터를 자식들에게 보내고, 자식들은 그것을 자기 나름대로 처리하는데,\n    // 데이터를 가공해서 메시지를 보낸다. (부모의 메소드를 실행시킴으로서 데이터를 담은 메시지를 보냄.)\n\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // habits[index].count++;\n    //this.setState({ habits });\n\n    // map 이해 return?\n    //(필터와 비슷한건가), ++는 안되는건가?\n    // ++를 앞에주면 되고, 뒤에 주면 객체는 매번 교체되기때문에 적용 안됨.\n    const habits = this.state.habits.map(item=>{\n      if(habit.id===item.id){\n        return {...habit, count: habit.count+1};\n      }\n        return item;\n    })\n\n    this.setState({habits});\n  };\n\n  handleDecrement = habit => {\n\n    const habits = this.state.habits.map(item=>{\n      if(habit.id===item.id){\n         const count = habit.count - 1;\n        return {...habit, count: count < 0 ? 0 : count}\n      }\n        return item;\n    })\n\n    this.setState({habits});\n  };\n\n  handleDelete = habit => {\n    const habits = this.state.habits.filter(item=>item.name!==habit.name)\n    this.setState({habits});\n    // console.log(habit);\n    // const list = document.querySelectorAll('.habit-name');\n    // list.forEach(li => {\n    //   if(li.innerHTML==habit.name){\n    //     li.parentNode.remove();\n    //   }\n    // })\n  };\n\n  addHandling = name =>{\n\n    const habits = [...this.state.habits, {id:Date(),name,count:0}]\n\n    this.setState({habits});\n\n  }\n\n  handleReset = () => {\n    const habits = this.state.habits.map(habit=>{\n      if(habit.count>0){\n        return {...habit, count:0}\n      }else{\n        // map이 리턴하는 것은 모두 새로운 것이 아니라, 기존의 객체 그대로를 리턴할수도있다.\n        // 즉, 업데이트 되지 않고 그냥 얕은 복사를 해온다는거지?\n        return habit\n      }\n    });\n\n    this.setState({habits});\n\n  };\n\n  render() {\n    return <>\n    <Navbar\n      totalCount={this.state.habits.filter(item=>item.count>0).length}\n    />\n    <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.addHandling}\n          onReset={this.handleReset}\n    />\n    </>\n  }\n}\n\nexport default App;\n\n\n/*\n오브젝트(state)를 직접 수정하지 않아야한다.\n\n김효민  오후 3:30\n2.12 부모는 함수와 데이터를 자식에게 전달하고 자식은 받은 데이터를 자기 방식으로 가공하여 다시 부모의 메소드에 데이터를 담아서 실행 시킨다.(메시지를 보낸다)\n\n김효민  오후 3:45\n자식은 컴포넌트(UI)와 데이터가공을 제공한다.\n부모는 자신의 데이터를 자식에게 넘겨서 데이터를 가공하여 가공된 데이터를 이용한다.\n\n김효민  오후 3:56\n자식이 데이터를 가공하는 과정은, 받은 데이터를 재가공할수도, 새로운 데이터를 만들어 보낼수도 있다.\n자식이 Input에 입력된 값을 스스로 만들어내서 부모에게 보낸다. 부모는 응답할 전화번호(함수의 변수명)와 요청(메시지)만 보내면 된다.\n*/","import React, { useCallback, useEffect, useRef, useState } from 'react';\n\nconst SimpleHabit = (props) => {\n\n  // state = {\n  //   count: 0,\n  // };\n\n  const [count,setCount] = useState(0);\n\n  const spanRef = useRef();\n\n  useEffect(()=>{\n    console.log({count});\n  })\n\n  const handleIncrement = useCallback(() => {\n    setCount(count+1);\n  });\n\n  return (\n    <li className=\"habit\">\n      <span className=\"habit-name\">Reading</span>\n      <span ref={spanRef} className=\"habit-count\">{count}</span>\n      <button\n        className=\"habit-button habit-increase\"\n        onClick={handleIncrement}\n      >\n        <i className=\"fas fa-plus-square\"></i>\n      </button>\n    </li>\n  );\n}\n\n\n\n\nexport default SimpleHabit;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport App from './app';\nimport SimpleHabit from './components/simpleHabit'\n\nReactDOM.render(\n  <React.StrictMode>\n    <SimpleHabit/>\n    {/* <App /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}